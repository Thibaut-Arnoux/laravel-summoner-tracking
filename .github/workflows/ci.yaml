name: CI via Docker
on:
  pull_request:
    branches:
      - master
jobs:
  build-ci:
    runs-on: ubuntu-latest
    environment: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: thibautarnoux/laravel-summoner-tracking
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/ci/Dockerfile
          tags: thibautarnoux/laravel-summoner-tracking:pr-${{ github.event.number }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
      - name: Output Github Context
        run: |
          echo "${{ github.event.number }}"
  run-ci:
    needs: build-ci
    runs-on: ubuntu-latest
    environment: ci
    container:
      image: thibautarnoux/laravel-summoner-tracking:pr-${{ github.event.number }}
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        DB_CONNECTION: pgsql
        DB_HOST: pgsql
        DB_PORT: 5432
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    services:
      pgsql:
        image: postgres:15
        env:
          POSTGRES_DB: testing # defined in phpunit.xml
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
    defaults:
      run:
        working-directory: /var/www/html
    steps:
      - name: Output Github Context
        run: |
          echo "${{ github.event.number }}"
      - name: Lint
        run: ./vendor/bin/pint
      - name: Static analysis
        run: ./vendor/bin/phpstan
        # Use to fix laravel test warning, env variables are set on container level
      - name: Empty testing envfile
        run: touch .env.testing
      - name: Test
        run: php artisan test --compact
      - name: Test coverage
        run: php artisan test --coverage --min=70
        # TODO: Test docker build images (php-fpm / apache )for production
